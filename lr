#! /usr/bin/env perl 

use Getopt::Std;
use Getopt::Long;
use POSIX qw(uname);
use File::Path;
use File::Copy;
use Cwd;
use Archive::Tar;
use Plucknames;
#Save time executing Load Reviews
#Creates neccesary directories for current load.
#SFTP's to lucky, user enters name and pwd and 
#manually gets the zipped tarball.
#DO NOT specify any directory path in FTP copying, quit FTP and script 
#finds, extracts and runs ACIS LR script on backstop file.
#If print option used: prints ACIS-LoadReview.txt file to chosen printer.
#Default is no print, "hp0" print to hp0, "happy" will print to happy
#History file will not work if symbolic link to "ofls" has 
#not been made for previous week, even if only one version of load!
#written by:  Joe DePasquale
#started:     Sept 2001
#to see updates, please go the CVS version
#last update: 08 OCT 2009
#
#
# Update: ??? Some time in 2016
#         Royce Beuhler
#         Mods to allow the code to run LR-BAK
#
# Update: September 15 2016
#         Gregg Germain
#         1) Modify LR code to use the new CTI-report format converter
#       
#         First step was to do a diff between the version of lr obtained from the
#         GIT repo and the one in /data/acis/LoadReviews/script/lr-v1.61 (the latest)
#                   /data/acis/LoadReviews/script/lr -> lr-v1.61
#
# Update: Jan 13, 2017
#         Gregg Germain
#         1) Fixed ACIS table reporting such that it now reports .DAT
#            as well as .CFG
#
# Update: February 21, 2017
#         Gregg Germain
#         Added the creation of a file: ACIS-Continuity.txt
#         which contains ONLY the user-supplied continuity 
#         file name (e.g. FEB0517) and a carriage return
#
# Update: April 14, 2017
#         Gregg Germain
#         Added echos for all user inputs that didn't have them
#         Also added lines to ACIS-Continuity.txt:
#              - Continuity load (already in the file)
#              - <type of load>  <interrupt time>
#         Type of load can be "Normal", "TOO", "SCS107"
#
# Update: July 18, 2017
#         Gregg Germain
#         MERGER of Production LR (lr_v1.63) with MIRROR LR
#         Copied Production  LR (lr_v1.63) to MERGER lr_v1.64
#
#         From Production -> Mirror
#              Continuity Tracking - ACIS-Continuity.txt
#
#         From MIRROR -> PRODUCTION LR
#        
# Update: Aug 9, 2017
#         Gregg Germain
#         Capture the command line and print it so that it
#         appears on screen as well as in the log file.
#           Does not capture the Tee-off to the log file
#      
#
# Update: April 25, 2018
#         Gregg Germain
#         Added Check_Power_Cmds.py to the stream of LR checks.
#
# Repo Update: November 28, 2018
#              Merged v3.2 with Master to align the repo with production
#
# Repo Update: November 28, 2018
#              V3.3
#              GIT - 662c0f7
#              - Set up sdtout buffer autoflush
#              - Eliminated process fork so that the LR 
#                stdoutput to the screen looks right
#              - Collected status from the system/sftp call
#                and arranged a clean exit in case lucky
#                is not accessible.
#
# Update: December 20, 2018
#         V3.4
#         GIT - e22ed76
#         - Changed run_models_acis.pl to run_models.pl
#
# Update: August 28, 2019
#         V3.5
#         GIT - 2aaad37
#         - copy ACIS-LoadReview.txt.ERRORS to ACIS-LoadReview.txt so 
#           that we have only one file to check during load reviews.
#         - pointed to ska3/flight instead of ska/bin for ska Python 3
#
# Update: December 11, 2019
#         V3.6
#         - Moved the code which generates the HTML version
#           of ACIS-LoadReview.txt, to after the Check power
#           commands code.
#         - Removed the earth-acis-fov code
#
# Update: September 25, 2020
#         V3.7
#         - Use Python3 for Window_check.py
#         - Added and/or modified comments
#
# Update: February 25, 2021
#         v3.8
#         - Store production NLET file as a dated file 
#           to accomodate using for tests
#         - Modified call to Check_Power_Cmds.py
#
#
# Update: August 23, 2021
#         v3.8.5
#         - Update to copy the bright-source list employed to ofls.
#
#
# Update: September, 21, 2021
#          V3.9
#         - Move CHECK_POWER_COMMANDS and WINDOW_CHECK to before
#           run_models call
#
# Update: November 24, 2021
#         V4.0
#         - Added -VO argument to the command line which will allow
#           the user to force the use of the Vehicle Only load
#           when reading in the Review Load, the Continuity Load
#           or both (VOR, VOC, VOB)
#         - User can include the letter in the Continuity load argument.
#           This will allow the user to force an earlier load, if the same name,  to be the continuity load.
#         - Clarified the questions which, when -break is used, determine what the
#           load type is (TOO, SCS-107, STOP).
#         - added --nomodels switch to run LR without running the thermal models
#         - Added comments and fixed typos
#
# Update: February 10, 2022
#          V4.1
#          - Activated hooks for VOB and VOR switches
#
# Update: March 15, 2022
#          V4.2
#          - Modified lr to include the DO*.orp file in the file extraction from the tarball
#
# Update: June 13, 2022
#         V4.3
#         - Changes to accomodate DS10.11/Red Hat 8, and the change in txings
#         - Removed code that called fptemp_sens_finder.pl
#
# Update: December 3, 2022
#         V4.4
#         - Added Idle Dwell Check program to LR
#         - Added the extraction of mps/or/<filename>.or from the tar file
#             - This was done by introducing Tar_Extract.py as a utility in order
#               to continue the migration from Perl to Python.
#         - Added HRC/TXING time delta check
#
###########################################################
# usage: lr [present load] [previous week]                #
#         example:  lr AUG2701A AUG2001                   #
###########################################################  
#
# Set up autoflush
$| = 1;

# Capture the command line and print it out so that there's
# a record of what the user typed in:
my $commandline = $0 . " " . (join " ", @ARGV);
print "\nlr - Command Line: $commandline \n\n";

#
# Some inits for the ACIS-Continuity file
my $load_type = "Normal";
my $interrupt_time = "";

#Check for options: will remove options from argv
$nlet_file = "/data/acis/LoadReviews/NonLoadTrackedEvents.txt";
$server="ocatsqlsrv";
$hostname="acis.cfa.harvard.edu";   #for PSMC
$skiplucky = 0;
$break = 0;
$easy_clean = 0;
GetOptions('break' => \$break,         #run lr_break options,
	   's=s' => \$server,           #to be passed to acisparams.pl
	   'n=s' => \$hostname,       #to be passed to run_PSMC.pl
	   'nolucky' => \$skiplucky,   # acquire backstop manually
	   'clean' => \$easy_clean,
	   't=s' => \$test_dir,         # Test directory
           'nlet_file=s' => \$nlet_file, # NLET file name
           'nomodels' => \$nomodels,
           'VO=s', \$VO_choice);      # Vehicle Only switch [VOC, VOR, VOB]
$argc = @ARGV;
$argc >= 2  or die "ERROR! AT LEAST TWO INPUTS REQUIRED!\nUSAGE: lr {present load} {preceeding week} [-s alternate database server] [-n alternate PSMC code node] [-t test directory name] [-nlet_file alternative NLET file LR should use] [-b or --break use for a replan or interrupt]\n";

# Create an array of valid -VO switch values. If the user supplies a value and 
# if it's not in the array then write an error message (listing the valid ones) 
# and then end execution before any subdirectories are created
@VO_types  = ("VOC", "VOR", "VOB");

# If $VO_choice has no value, then the user didn't supply a --VO argument
# so there's nothing to check
if ($VO_choice  ne "")
  {
    # But since they did supply one, check to see if the supplied argument 
    # is in the list. We want to check this and, if the input is invalid, exit.
    if(  not( grep( /^$VO_choice$/,  @VO_types)))
      {
       die("FATAL ERROR - $VO_choice is an invalid value for the VO switch.\nValid values are: VOC, VOR, VOB\n");
      }
    else
      { print "\n The VO value is: $VO_choice";}

  }



# Record the NLET file being used in the log
print "\n LR I am using NLET FILE: : $nlet_file\n";

# If the Production NLET file is being used, record a dated copy of 
# it in the /data/acis/LoadReviews/TEST_NLET_FILES directory
if ( (! $test_dir) && ($nlet_file eq "/data/acis/LoadReviews/NonLoadTrackedEvents.txt"))
  {
     print "\n Production run with the Production NLET file - I will create a dated entry in the test NLET file dir\n";
     `cp $nlet_file /data/acis/LoadReviews/TEST_NLET_FILES/@ARGV[0]_NonLoadTrackedEvents.txt`;
  }
else
  {print "\nRunning in --TEST mode or not using the Production NLET file - No NLET file save required\n";}

#----------------------------------------
# Prepare for i/o control from python subprocess
#----------------------------------------
$| = 1;   # Autoflush after every stdout print, write

#--------------------------------------------------------------------
# NEW CODE to allow one lr to run in regular and backup 
# modes
# SET UP the directory for the scripts
#--------------------------------------------------------------------
$appx = `lr_suffix.pl`;   # Null or "_bak"
if($0 =~ /bak/) {
    $base_dir=</data/acis-bak>;
}
else{
    $base_dir=</data/acis>;
}
#----------------------------------------
#directory definitions
#----------------------------------------
$lr_dir = <${base_dir}/LoadReviews>;
$lr_bak_dir = </data/acis-bak/LoadReviews>;
$script_store_dir = <${base_dir}/LoadReviews/script>;

# PRODUCTION Define call to acis-backstop.  
$backstop = <${base_dir}/LoadReviews/script/acis-backstop.pl>;


#------------------------------
# Get the directory to use for the C++ code
#------------------------------
my ($uname_s, $uname_r)  = (POSIX::uname())[0,2];

#Set up the Linux executable paths
if (($uname_s eq "Linux"))
 {
    $cc_directory=<${base_dir}/LoadReviews/Linux/bin>;
    $tar=</bin/tar>;
    $gzip=</bin/gzip>;
    $sftp=</usr/bin/sftp>;
    $ftp=</usr/bin/ftp>;
    $gunzip=</bin/gunzip>;
 }
else
 {
    die("$0 is only supported on Linux: This version $uname_r\n");
 }

###FIND THIS AND MOVE IT TO LOADREVIEWS
$cur_load_dir=<${base_dir}/LoadReviews/>; #needed for ACE Update

#directory generation and tar file copying
#
# REVIEW load
$cur_load=@ARGV[0];

# Continuity load
$prev_load=@ARGV[1];


# The basic command line for lr is: lr Review_load Continuity_load
#                              e.g. lr OCT3021A OCT2821
# These arguments are stored in $cur_load and $prev_load respectively.
#
# This code addition allows for the inclusion of the letter to the 
# Continuity load week in the LR command. e.g. lr OCT3021A OCT2821B
#
# Up until now we never included it. LR doesn't expect a letter there, and the thermal
# models (via ACIS-Continuity.txt - created by lr) default to the .../ofls directory. 
# Turns out that it's possible that a Continuity load week might have an A, B, or C
# load but the actual continuity load used was A or B. ofls will point to C. This
# code update allows for that. It also allows for not specifying a letter
# If the user does not specify a letter then the ACIS-Continuity.txt file
# will default to the ofls directory for that previous week.
# 
# In either case, $prev_load will end up containing the 7 character load week without
# the load letter so that the rest of lr will not have to be changed.

# Find the length of the preview load name. Syntax was fixed at 7 letters
# i.e. MMMDDYY (OCT2821).  But now it can be either 7 or 8: OCT2821 or OCT2821A
$ofls_val = "";
$len_prevload = length($prev_load);

# Get the last token in the preview load name
$last_token = substr($prev_load, -1);


print("\n    The Previous load variable contains:  $prev_load");


# If the length was 8 and the last token was a capital letter
# Then remove the letter from $prev_load, and add the lower case of that letter
# to the ofls string.
if ($len_prevload == 8 && $last_token =~ m/^[A-Z]/)
  {
   # Remove the letter from $prev_load
   $prev_load = substr($prev_load, 0, $len_prevload - 1);
   # add the lower case of the load letter to the ofls string
   $ofls_val = $ofls_val.lc($last_token);
  }

print("\nThe Previous load variable now contains:  $prev_load");
print("\nThe ofls value that will be used is: $ofls_val");

print("\n");

# Initialize variables used to point to current and previous load directory years.
$load_dir="";
$prev_dir="";
$prev_year="";
$cur_year="";
$load_version="";
$load_name="";


#PARSE THE LOAD INFORMATION
find_names($cur_load,$prev_load,$test_dir);
#------------------------------
#Set the directories & files
#------------------------------
# ---- OFLS_DIR is where the load files eventually go. -------------  OFLS dir
#     e.g. /data/acis/Loadreviews/2016/SEP2416/oflsa
$ofls_dir="${lr_dir}/20${cur_year}/$load_dir/ofls${load_version}";

#     e.g. /data/acis/Loadreviews/2016/SEP2416/        ------------- load dir
$cur_load_dir="${lr_dir}/20${cur_year}/$load_dir/";

#     e.g. /data/acis/Loadreviews/2016/SEP0616         --------- Prev Load dir
$prev_load_dir="${lr_dir}/20${prev_year}/$prev_dir/ofls";

$back_ofls_dir="${lr_bak_dir}/20${cur_year}/$load_dir/ofls${load_version}";
$back_dir="${lr_bak_dir}/20${cur_year}/$load_dir/";
$web_dir = $ENV{"WEB_ACIS"};
$web_lr_dir = "${web_dir}/lr_texts";

# Location of web pages on the backup machine (colossus-v).
$web_bak = "/data/anc/apache/htdocs/acis";
#    $web_lr_dir = "/proj/web-cxc-dmz/htdocs/acis/lr_texts";

$ace_helper="${cur_load_dir}ofls";
$hist = "$prev_load_dir/ACIS-History.txt";
$old_perigee= <$prev_load_dir/ACIS-Perigee.txt>;
$old_crm = `ls $prev_load_dir/*CRM*`;
chomp($old_crm);
@ocrm = split(/\//, $old_crm);
$ocrm_file = $ocrm[7];
#--------------------
#Check user
#--------------------
$acisdude_uid=getpwnam acisdude;
$acisdude_uid == $< or die "Error: Must be logged in as acisdude. You are $<\n";
#--------------------
#check directory existance
#--------------------
if (-d $lr_dir) {
    $work_dir = $lr_dir;
    $script_dir = $script_store_dir;
}
else{
    die "ERROR: ${lr_dir} is unreachable. Use backup script.\n";
}
#CLEAN DIRECTORIES
#------------------------------------------------------------
# Command line included a -clean switch. Recursively delete
# $lr_dir and $back_ofls_dir, if present.
#------------------------------------------------------------
if ($easy_clean == 1) {
    if (-d $back_ofls_dir) {
	print "system: rm -r ${back_ofls_dir}\n";
	system("rm -r ${back_ofls_dir}");
    }
    if (-d $ofls_dir) {
	print "system: rm -r ${ofls_dir}\n";
	system("rm -r ${ofls_dir}");
    }
    exit(0);
} 

#BUILD THE DIRECTORIES
#------------------------------
# mkpath will build the entire path IF NEEDED. This eliminates the need to 
# do several mkdirs in if/else loops
#------------------------------
unless( -d $ofls_dir){
    mkpath($ofls_dir, 1, 0775);
}
else{
    die "The directory $ofls_dir already exists. Code exiting\n";
}

# Only do the backup if this is not a test
# and we're not already on the backup system
if( (! $test_dir) &&
    ($base_dir eq "/data/acis"))
      {
        unless( -d $back_ofls_dir)
          {
	   mkpath($back_ofls_dir, 1, 0775);
          }
        else
          {
	   die "The directory $back_ofls_dir already exists. Code exiting\n";
          }
      }

#------------------------------------------------------
# Transfer file from Lucky after making the directories
#------------------------------------------------------

# CD to the newly-created ofls<x> directory.
# CD to /data/acis/LoadReviews/<YEAR>/LOAD/ofls<a,b,c etc>                 --------------------------------  IN OFLS DIR
chdir("${ofls_dir}") || die "Cannot change directories to $ofls_dir\n";

if ($skiplucky)
 {
    print "\nIn another window, please copy desired backstop tarball\n";
    print "into load directory $ofls_dir\n";
    print "DO NOT unzip the tarball.\n";
    print "\n\nfile copied, ready to continue?(Y/N)\: ";
    $user=<STDIN>;
   unless ($user =~/y/ || $user =~/Y/)
     {
       die "No backstop.tar.gz file available, exiting.\n";
     }
 } # ENDIF if ($skiplucky)
else
 {  # using sftp lucky                               -------------- GET TARBALL
    print "\nCopy zipped tarball file from lucky\n";
    print "get /home/SOT_Transfer/$load_name/${cur_load}_backstop.tar.gz \n";
#----------------------------------------
# Fork a process to sftp to lucky
#----------------------------------------
    print "\n\nSFTP to lucky: Please enter username to connect: ";
    $user=<STDIN>;
    chop($user);

    print "\n Ok as soon as I get your password I will copy the tarball file into $cur_load_dir - be back in a second.....\n";
    $my_sftp_status = system("${sftp} ${user}\@lucky.harvard.edu:/home/SOT_Transfer/$load_name/${cur_load}_backstop.tar.gz");

    # if the status is non-zero, end it all right here.
    # The status values returned are:
    #  0 = success (system success not Perl success)
    #  65280 = bad username and/or bad password 
    #          or if if lucky is unavailable
    if ($my_sftp_status != 0)
      {
       die "Cannot connect to lucky for some reason. Status = $my_sftp_status";
      }
    else # Otherwise assume the backstop file was collected and proceed
         # If the backstop file was NOT collected, lr will fail downstream
         # from here. However if lucky is alive, you get the file.
      {
       print "\nOk attempted transfer of the backstop file is complete....\n";
      }

 } # END ELSE if ($skiplucky)


#--------------------------------------------------------------------------------------------------
# TARFILE EXTRACTION - Unzip the file an extract the items we need.
#--------------------------------------------------------------------------------------------------
# You are in the OFLS directory                      ----------  IN OFLS DIR
@zip = Plucknames->findNames($ofls_dir, "backstop.tar.gz");
$zip = $zip[0];
print "unzipping: $zip ...\n";

# GUNZIP the tarball ------------------------------------------- GUNZIP
# This progam gzips the .tar file at the end of execution.
`${gunzip} $zip`;

# Get tar file
$file = (Plucknames->findNames(".", "backstop.tar"))[0];

# Extract both the CR*.backstop file and the .../vehicle/VR*.backstop file
# backstop extraction and acis script
@tarTOC = Archive::Tar->list_archive($file, 0);
@bck = Plucknames->tarNames(\@tarTOC, "backstop"); 

foreach $b (@bck){
    @field = split(/\s+/, $b);
    $bfile=pop(@field);
    if($bfile =~ /^CR/){
	$backfile=$bfile;
	chomp ($backfile);
    }
    if($bfile =~ /VR/){
	$vfile=$bfile; 
	chomp ($vfile);
	@vfield2 = split(/\//, $vfile);
	$v_name=pop(@vfield2);
	chomp($v_name);
    }
    chomp ($backfile);
} #end each backstop file found    
if ($backfile eq ""){
    die "ERROR: can't extract backstop file.";
}
if($vfile eq ""){
    warn "Warning: No VR backstop file.\n";   
}

print "\n    You are in directory: ", `pwd`;

# Run the CTI_report to CTI_REP Pad Time file converter.
# This file is used in comparing backstop pad time against cti_rep pad time

# Create the CTI report file exists flag. It starts out 
# "No". It will either be changed to "Yes" if the file 
# turns out to exist in the ...mps/er dirctory, or it will stay "No"
my $cti_rep_file_exist = "No";

@cti_rep_file_list = Plucknames->tarNames(\@tarTOC, "CTI"); 

# Check to see if the cti_rep_file_list is empty
# If it isn't empty we use the CTI_report file supplied in the tarball
# If it's empty we tell the use and exit the program

if (scalar @cti_rep_file_list != 0)
  { # The list is not empty so we have a CTI_report file
    # set the exists flag to "Yes"
    $cti_rep_file_exist = "Yes";

        
    # Grab the first entry in the list
    @field2 = split(/\s+/, $cti_rep_file_list[0]);
    $cti_rep_file=pop(@field2);
    chomp ($cti_rep_file);
        
    @field3 = split(/\//, $cti_rep_file);
    $cti_rep_file_name=pop(@field3);
    chomp ($cti_rep_file_name); # file name only
  }
else # List is empty inform the user. Give the user the chance to specify one
 {
   # The list IS empty so we don't have a CTI_report file
   # set the exists flag to "No". It was initialized to No
   # but do it anyway.
   $cti_rep_file_exist = "No";

   # Tell the user there is no CTI report file in this backstop tarball
   print "\nERROR: can't extract CTI REPORT file.";

   # Allow the user to specify one if they want; ask the user
   print "\n    Do you want to specify your own CTI_report file? (1=Yes, 2=No)\n";
   $cti_in=<STDIN>;
   chomp($cti_in);

   # If the user typed a 1, get the file
   if ($cti_in eq 1)
     {
      print "Please specify the CRM input filename with no directory paths\n\t (and be sure to copy it into the load directory):\n";
      $ocrm_file = <STDIN>;
      chomp($ocrm_file);
     }
   else
     {
      die "\nERROR: No CTI REPORT file exists in the tarball and the user did not wish to copy one in.\n EXITING PROGRAM";
     }
 } # END ELSE  List is empty inform the user and exit the program


# ORLIST - Extract the ORLIST for this week's file
# This block of code finds the name and location of
# the orlist .or file. That path is forwarded to Tarfile_Extract.py

# Load version in ORLIST .or files are always uppercase
# Create the upper case.
$uc_load_version = uc $load_version;

# Formulate the name of the ORLIST lor file for this load and version
$orlist_file_name = $load_name."_".$uc_load_version.".or";

# Find out where the file exists in the tarfile directory hierarchy 
@or_file = Plucknames->tarNames(\@tarTOC,  $orlist_file_name);

@or_field = split(/\s+/, $or_file[0]);
$or=pop(@or_field);
chomp($or);

# Warn the user if the file cannot be extracted.
if ($or eq ""){
    print "WARNING: can't extract .or file.\n";
}

# Now extract the name of the file from the path.  This is used when
# listing the files, as lr output for the user,  extracted from the tarfile
@or_field2 = split(/\//, $or); #short name
$or_name = pop(@or_field2);

#file used in determining bad pitch angle observations
@mm_sum = Plucknames->tarNames(\@tarTOC, "sum", "mps", "mm");
@field2 = split(/\s+/, $mm_sum[0]);
$mmfile=pop(@field2);
chomp ($mmfile);
if ($mmfile eq ""){
    die "ERROR: can't extract mm*.sum file.";
}
@field3 = split(/\//, $mmfile);
$mm_name=pop(@field3);
chomp ($mm_name); #mmfile short name

#file used in displaying version of ACIS tables used in load
@ms_sum = Plucknames->tarNames(\@tarTOC, "sum", "mps", "ms"); 
@field4 = split(/\s+/, $ms_sum[0]);
$msfile=pop(@field4);
chomp($msfile);
if ($msfile eq ""){
    die "ERROR: can't extract ms*.sum file.";
}
@field5 = split(/\//, $msfile); #msfile short name
$ms_name=pop(@field5);
chomp($ms_name);

# Extract the ORP file from mps/er/DO*.orp
@orp_file = Plucknames->tarNames(\@tarTOC, "mps", "er",  "DO");
@orp_field = split(/\s+/, $orp_file[0]);
$orp=pop(@orp_field);
chomp($orp);
if ($orp eq ""){
    print "WARNING: can't extract DO*.orp file.\n";
}

@orp_field2 = split(/\//, $orp); #short name
$orp_name = pop(@orp_field2);

#Get NIL er file
@nil_file = Plucknames->tarNames(\@tarTOC, "mps", "er", "C${load_name}"); 
@nil_field = split(/\s+/, $nil_file[0]);
$nil=pop(@nil_field);
chomp($nil);
if ($nil eq ""){
    print "\nWARNING: can't extract C${load_name} NIL file.\n";
}
@nil_field2 = split(/\//, $nil); #short name
$nil_name=pop(@nil_field2);
chomp($nil_name);


#Get MNVR file name
@mnvr_file = Plucknames->tarNames(\@tarTOC, "output", "MNVR"); 
@mnvr_field = split(/\s+/,$mnvr_file[0]);
$mnvr=pop(@mnvr_field);
chomp($mnvr);
if ($mnvr eq ""){
    print "WARNING: can't extract MNVR Summary file.\n";
}
@mnvr_field2 = split(/\//, $mnvr);
chomp($mnvr_field2[1]);

#Get the name of ofls directory where we are running
$localdir = getcwd();


print "\nUNTARRING the backstop file";
# UNTAR THE BACKSTOP TAR FILE --------------------------------------- TAR -XVF

# Untar the backstop tar file to extract the necessary files using Tarfile.Extract.py
system("python3 /data/acis/LoadReviews/script/Tarfile_Extract.py --nargs $file  $backfile $mmfile $msfile $nil  $mnvr  $vfile  $cti_rep_file $orp");



#----------------------------------------
#  LR BREAK PROCESSING - Run ONLY if the -b flag is set
#----------------------------------------
if ($break == 1)
  {
    # lr_break returns the load type and the interrupt time
    $load_type,$interrupt_time =  lr_break();
    $hist=$edit_hist;
  }

# ------------------  CONTINUITY TRACKING -----------------------------
# You now know everything you need to know in order to write
# out the ACIS-Continuity.txt file

# Open the ACIS-Continuity.txt file
open(CONTFILE, ">$ofls_dir/ACIS-Continuity.txt");

# Now that you know the location of the previous load, write that full
# directory path to the ACIS-Continuity.txt file
print CONTFILE $prev_load_dir.$ofls_val, "\n";

# Now, if the user specified either "VOC" or "VOB"for the VO command line argument,
# then append "VO_" to the load type.  This will inform the models
# that when the continuity load is read, the Vehicle Only version
# should be used.  Otherwise load_type should be just the present
# value
#
# VOB stands for (V)ehicle (O)nly (B)oth, meaning that the VR*.backstop vehicle only file
# should be read for both the Review and the Continuity load.  But this piece of code
# handles what gets written to the ACIS-Continuity.txt file. So in both cases (VOC and VOB)
# You want ACIS-Continuity.txt to indicate vehicle-only for the Continuity load.
# Reading the VR*.backstop file for the review load is handled by the call to run-models.pl.
if  ( ($VO_choice eq "VOC") || ($VO_choice eq "VOB") )
  {
    # User selected VOC for the VO switch. Tell the model to read
    # the vehicle only load for the Continuity. Append "VO_"
    # to the recognized load type
    $load_type = "VO_".$load_type;
  }

# Now if $VO_choice is either VOB or VOR, then the REVIEW Load is to be run Vehicle Only.
# In this case copy the CR*.backstop file to ORIG_CR*.backstop, and the .../vehicle/VR*.backstop
# is to be copied to CR*_V.backstop.
# 
if  ( ($VO_choice eq "VOR") || ($VO_choice eq "VOB") )
  {

    # Save the full backstop file as ORIG_CR*.backstop
    print "\nReceived the $VO_choice switch. Copying $backfile to ORIG_${backfile}";
    system("mv $backfile ORIG_${backfile}");

    # Formulate the modified name for the CR backstop file to include "_V" in the name
    # Index of the beginning of the extension: ".backstop"
    $ext_index = index($backfile, ".backstop");

    # Extract the file name without the extension
    $old_CR_file_name = substr($backfile, 0, $ext_index);

    # Compose a new name by concatenating the "_V" to the name and include the extension
    $new_CR_file_name = "${old_CR_file_name}_V.backstop";

    # Perform the copy of the Vehicle-Only file to tne CR file with the new name.
    print "\n    ...and now copying $vfile to $new_CR_file_name";
    system( "cp $vfile $new_CR_file_name");


    # Lastly, change the variable $backfile so that it points to the new CR*_V.backstop file
    # Other applications need to access this file and they need to know the new name
    $backfile  = $new_CR_file_name;
  }


# Write out the type of load: Normal, TOO, SCS107  
if ($break == 1)
  {
    print CONTFILE $load_type, " ", $interrupt_time, "\n";
  }
else
  {
    print CONTFILE $load_type, "\n";
  }  

# Close the continuity file
close(CONTFILE);

# Inform the user of the load type LR has determined from your answers
print "\nLR has determined that the review load is of type: $load_type\n";



#--------------------------------------------------------------------
#Let's go!
#--------------------------------------------------------------------
#------------------------------
#Print files in use
#------------------------------
print "\n\tFOR LOAD ${load_name}\n";
print "\tNew Directory: $localdir\n";
print "\tCombined Backstop File: $backfile\n";
print "\tVehicle Backstop: $vfile\n";
print "\tmm*.sum File: $mm_name\n";
print "\tms*.sum File: $ms_name\n";
print "\tCRM Pad Time file: $crm_name\n";
print "\tHistory File Used: $hist\n";
print "\tManuever File Used: $mnvr\n";
print "\tCTI_Report File Used: $cti_rep_file_name\n";
print "\tOrbit Events File Used: $orp_name\n";
print "\tORLIST file extracted: $or_name\n";
#unlink ("*.tar");


# Move files to the right locations.
rename("$mmfile","./$mm_name");
rename("$msfile","./$ms_name");
rename("$orp", "./$orp_name");

# If we found a CTI report file then copy it over into the
# operational ofls directory.  
if ($cti_rep_file_exist eq "Yes")
  {
   print "\n Copying over the CTI Report file";
   rename("$cti_rep_file","./$cti_rep_file_name");
  }
else
  {
      print "\nNo CTI Report file was found - I sure hope you copied one in";
  }


# Now that you've copied over the CTI_report file into the ofls
# directory, run the converter on it.  Remember, if you got here it's 
# because either the tarball had a CTI_report file in it or the user
# copied one in.
print "\nRunning the converter to go from CTI to CRM";
print "\nThe Converter command I'm running is: ";
print "\n    python3 $script_store_dir/Convert_CTI_to_CRM.py $ofls_dir\n";
`python3 $script_store_dir/Convert_CTI_to_CRM.py $ofls_dir`;

if(-e "$nil")
  {
    rename("$nil","$nil_name");
  }
if(-e "./er")
  {
    system("mv er/* .");
    rmdir("er");
  }

# Remove the extra directories you created with the tar command
rmtree("./mps");

#------------------------------
#Informational 
#------------------------------

#Run the Health and Safety script

print "\tRunning Health and Safety Script...\n\n";
# PRODUCTION
system("python3 ${script_store_dir}/LRHS $localdir/${backfile} ${hist} > ${ofls_dir}/LRHS.output "); 

print "\tRunning ACIS Load Review Script...\n\n"; 

# RUN ACIS-BACKSTOP

# PRODUCTION
$backstop_str = "$backstop -s ${server} ${localdir}/${backfile} ${hist}"; 
print "\nRunning $backstop_str...\n";
system("$backstop_str");
print "\nACIS-backstop completed.\n";


#------------------------------
# Set up soft links
#------------------------------
chdir("$cur_load_dir") || die "cannot change to ${cur_load_dir}\n";   #  -------------------------------- CHDIR IN .../YYYY/MMMDDYY DIR

if(-e "./ofls")
  {
    unlink("./ofls");
  }

# Point ofls to /data/acis/Loadreviews/2017/THE_LOAD/ofls<a,b,c...> 
symlink( "${ofls_dir}", "./ofls");

# CD to the OFLS dir
chdir("${ofls_dir}") || die "Cannot change to {$ofls_dir}";             #  -------------------------------- CHDIR IN OFLS DIR


#determine and display version of ACIS tables used:

open(DAT, $ms_name) || die "ERROR! can't open ms*.sum file";
open(OUT, ">ACIS-Tables.txt");
while (<DAT>)
{
    @row = split (/\s+/, $_);
    if (@row != " ")
    {
	$description = $row[0];
	chomp($description);
	if ($description eq "ACIS" && $row[1] eq "Configuration:")
	{
	    @cfg_list = split (/\//, $row[2]);
	    $cfg_file = $cfg_list[8];
	    chomp($cfg_file);
	}
	if($description eq "ACIS" && $row[1] eq "Data:")
	{
	    @dat_list = split (/\//, $row[2]);
	    $dat_file = $dat_list[8];
	    chomp($dat_file);
	}
     }
}
print OUT "$cfg_file\n$dat_file\n";
close(OUT);
close(DAT);      

#------------------------------
# Check for bad sun angle observations: changed to take
# previous directory string
#------------------------------
print "\nRunning saa_checker.pl...$script_dir/saa_checker.pl ${prev_load_dir}\n";
system ("$script_dir/saa_checker.pl ${prev_load_dir}");
open(SAA,"saa_check.txt") || warn "\nNo Observations with bad Sun Angles\n";
print "\nATTENTION! Observations with bad sun angles:\n";
while(<SAA>){
    print $_;
}
close(SAA);

#------------------------------
#run bright-source violations:
#------------------------------
print "Running bright-source...\n";
print "$cc_directory/bright-source ${localdir}/${mnvr}\n";
system("$cc_directory/bright-source ${localdir}/${mnvr}");
if(-f "violations.txt") { # only if file exists
    open(VIO,"violations.txt") || warn "Error opening violations.txt\n" ; 
    $count=0;
    while(<VIO>){
	$count++;
    }
    if($count > 2){
	seek(VIO,0,0);
	while(<VIO>){
	    print $_;
	}
    }
    else{
	print "\n***No bright-source violations in this load.***\n";
    }
    close(VIO);
}
else
{
    print "\nBright source code failed. Email nadams\@cfa with above errors.\n";
}

#---------------------------------------------------------------
#
# Any function that can be done prior to the execution of the
# Thermal Model run should be included here.
#
# At this point we are in the $ofls_dir - e.g. /data/acis/LoadReviews/2021/SEP2021/oflsa
# so any function you place here should either execute in this directory, or 
# you can chdir to a different directory but be SURE to chdir back to
# $ofls_dir when done.
#
#---------------------------------------------------------------
#
# Run Check_Power_Cmds.py
print "\nEXECUTING THE CHECK POWER COMMAND PROGRAM";
# PRODUCTION
system("python3 /data/acis/LoadReviews/script/CHECK_POWER_COMMANDS/Check_Power_Cmds.py");

# Now execute the Window Check program
print "\nEXECUTING THE WINDOW CHECK PROGRAM.";
system('python3 /data/acis/LoadReviews/script/WINDOW_CHECK/Window_Check.py');

# Next execute the SCS-155 Deadman Check
print "\nEXECUTING THE SCS-155 DEADMAN CHECK PROGRAM";

system("python3 /data/acis/LoadReviews/script/DEADMAN_SCS_155/Deadman_Check.py ${ofls_dir} ${nlet_file}");

# Next execute the HETG Check
print "\nEXECUTING HETG CHECK PROGRAM";

system("python3 /data/acis/LoadReviews/script/HETG_CHECK/HETG_Check.py ${ofls_dir} ${nlet_file}");

# Execute the Idle Dwell check
print "\nEXECUTING THE IDLE DWELL CHECK PROGRAM.\n";

if ($VO_choice  eq "")
  {system("python3 /data/acis/LoadReviews/script/IDLE_DWELL/Find_Idle_Dwells.py  ${ofls_dir}    ");}
else
  {system("python3 /data/acis/LoadReviews/script/IDLE_DWELL/Find_Idle_Dwells.py  ${ofls_dir}  --vo ${VO_choice}   ");}

# Execute the HRC/TXINGING Timing check
print "\nEXECUTING THE HRC TXING TIMING CHECK PROGRAM.";
system("python3 /data/acis/LoadReviews/script/HRC_TXING_CHECK/HRC_Txing_Check.py ${ofls_dir} ");

# Read in the ORLIST file
system("python3 /data/acis/LoadReviews/script/Tarfile_Extract.py --nargs $file  $or");

#--------------------------------
# Copy in Bright-Source List 
#--------------------------------
$bs_list = "/data/acis/LoadReviews/data/bright_xray.txt";
print " \nCopying bright-source list to the ofls:\n";
print "\nsystem: cp ${bs_list} ${ofls_dir}\n";
system("cp ${bs_list} ${ofls_dir}");


#--------------------------------------------------------------------
#run code to compare the backstop files
#--------------------------------------------------------------------
print "\nExecuting the backstop_compare code\n";
system("$script_dir/backstop_comp.sh");


#--------------------------------------------------------------------
# Run psmc_check and dpa_check, dea_check and fp_check...
# will secure shell to acis.cfa.harvard.edu if not on a linux machine
#--------------------------------------------------------------------
print "\nRunning the thermal code...\n";
if ($appx) {
    print "\nThermal models skipped when not on HEAD LAN\n";
} else {
    
    # This is so we can tell the thermal models if
    # this is an interrupt load
    if ($break == 1) {
	$break_str = "-b"
    } else {
	$break_str = ""
    }
 
    # Run the thermal models if the -nomodels was not set
    if(not $nomodels)
      {
        # If the -T switch was used, pass the test directory path to run_models
        # using the -p switch.  Otherwise, run_models will formulate a path to
        # the "for score" ofls directory.
        if($test_dir)
            {
              # Production
	      system("$script_dir/run_models.pl $cur_load -h $hostname -p $ofls_dir $break_str -nlet_file $nlet_file");

            }
        else
            {
	      system("$script_dir/run_models.pl $cur_load -h $hostname $break_str -nlet_file $nlet_file");
            }

      } #ENDIF NOT NOMODELS
    else
      {print("\n      User elected to NOT run the thermal models\n\n");}

    #update the webpage
    if( ! $test_dir){
	system("$script_dir/mk_thermal_html.pl $cur_load");
    }
}
print "Done with thermal codes...\n\n";

#--------------------------------------------------
#close down
#--------------------------------------------------------------------
print "\nACIS TABLES USED IN THIS LOAD:\n$cfg_file\n$dat_file\n";

# CD to /data/acis<-bak>/LoadReviews.
chdir("$lr_dir");                                 #  -------------------------------- CHDIR IN /DATA/ACIS/LoadReviews DIR

# Do NOT use this directory for ACE if there is test directory
unless($test_dir){
    open(OUT2, ">current_load.txt");
    print OUT2 "$ace_helper\n";
    close(OUT2);
}

#delete backstop file and re-gzip the tar file to save space
unlink("{$ofls_dir}/$backfile");

`$gzip -c ${ofls_dir}/$file > ${ofls_dir}/$zip`;


unlink("${ofls_dir}/$file");

#copy current load version to backup directory
if(! $test_dir){
print "\nCopying this version of the load to ${back_ofls_dir}...\n";
`cp -r ${ofls_dir} ${back_dir}`;
}
if(-e "${back_dir}/ofls"){
    unlink("${back_dir}/ofls");
}
symlink( "${back_ofls_dir}", "${back_dir}/ofls");

# Moved the Web Text code here

#----------------------------------------------------
# Create web version of lr text, and copy to web area.
#----------------------------------------------------
$swl_source = "${ofls_dir}/ACIS-LoadReview.txt";
$html_str = "${load_dir}\u${load_version}_lr.html";
$web_target_dir = "${web_lr_dir}/20${cur_year}";
if (! -d "$web_target_dir") {
    system ("mkdir ${web_target_dir}");
    system("cp ${web_lr_dir}/lr_web.css ${web_target_dir}");
    if ($appx ne "")
      { # Not running as lr_bak?
	system ('ssh acisdude\@colossus-v\: "mkdir ${web_bak}/lr_dir/20${cur_year}"');
	system ("scp ${web_lr_dir}/lr_web.css acisdude\@colossus-v:${web_bak}/lr_dir/20${cur_year}");
       }
}


print "\nsystem: show_web_lr.pl -f ${ofls_dir}/ACIS-LoadReview.txt "
    . "-o ${ofls_dir}/${html_str}\n";
system("show_web_lr.pl -f ${ofls_dir}/ACIS-LoadReview.txt "
       . "-o ${ofls_dir}/${html_str}");

# Now we always copy the file into the web directory. This way
# even if you are running in -TEST mode, you can look at the
# annotated web version if you use file:///
print "\nCopying ACIS-LoadReview.txt into the web directory:\n";
print "\nsystem: cp ${ofls_dir}/${html_str} ${web_target_dir}\n";
system("cp ${ofls_dir}/${html_str} ${web_target_dir}");



# But if this is being run in test mode, we still do not update
# the web page itself.
if (! $test_dir)
   { # A real run?
     # Update web page table of load review texts
     system("mk_lrtext_html.pl ${load_dir}\u${load_version}");
   }  # ENDIF (! $test_dir)

if ($appx eq "")
    { # Not running as lr_bak?
      # Copy updated table to backup machine
      system("scp ${web_lr_dir}/lrtexts.html acisdude\@colossus-v:${web_bak}/lr_dir");
    } # ENDIF ($appx eq "")



print "\nScript done.\n";

# DONE with MAIN
exit(0);

#--------------------------------------------------------------------
# function to parse out the names correctly
#--------------------------------------------------------------------
sub find_names{
    my($cur_load,$prev_load,$test_dir)=@_;
    #directory generation and tar file copying
    if($test_dir){
	$load_dir=$test_dir;
    }
    else{
	$load_dir=$cur_load;
    }
    
    
    #Parse- this is the expected MMMDDYYA load
    if($cur_load =~ m/^[A-Z]{3}[0-3][0-9]{3}[A-Z]$/){
	$load_name=$cur_load;
	$load_version=substr($load_name,7,1);
	chop($load_name);
	if(! $test_dir){
	    chop($load_dir);
	}
    }
    else{
	if ($cur_load =~ /[A-Z][A-Z][A-Z][0-3][0-9][0-9][0-9]$/){
	    print "The load version is missing. Please supply the load version(A-Z): ";
	    $load_version=<STDIN>;
	    chop($load_version);	# remove carriage return
	    $load_name=$cur_load;	
	}
	else{
	    die "Cannot process the input loads: $cur_load, $prev_load\n";
	}
    }
    
    if($prev_load =~ m/^[A-Z]{3}[0-3][0-9]{3}$/){
    }
    else{
	if($prev_load =~ m/^[A-Z]{3}[0-3][0-9]{3}[A-Z]$/){
	chop($prev_load);
    }
    }
    $load_version=~ tr/[A-Z]/[a-z]/;
    if(length($load_name)== 7){
	$cur_year=substr($load_name,5,2);
    }
    else{
	die "$cur_load could not be parsed for the appropriate load name\n";
    }
    if(length($prev_load)== 7){
	$prev_year=substr($prev_load,5,2);
    }
    else{
	die "$prev_load could not be parsed for the appropriate load name\n";
    }
    $prev_dir=$prev_load;
    
# SANITY CHECKS:
    if($cur_year !~ m/^[0-9][0-9]$/){
	die "ERROR: The year string was not properly extracted. Please check the input: $cur_load\n";
    }
    if($prev_year !~ m/^[0-9][0-9]$/){
	die "ERROR: The year string was not properly extracted. Please check the input: $prev_load\n";
    }
    if($load_name !~ m/^[A-Z][A-Z][A-Z][0-3][0-9][0-9][0-9]$/){
	die "ERROR: This script could not extract the load name correctly. Please check the input: $cur_load\n";
    }
    if($prev_dir !~ m/^[A-Z][A-Z][A-Z][0-3][0-9][0-9][0-9]$/){
	die "ERROR: This script could not extract the previous load name correctly. Please check the input: $prev_dir\n";
    }
    if($load_version !~ m/^[a-z]$/){
	die "ERROR: This script could not find the load version. Please check the input:$cur_load\n";
    }
    
    
    
    return (0);
}
#--------------------------------------------------------------------
#     lr_break: subroutine to collect the correct information
#--------------------------------------------------------------------
sub lr_break()
{
    # Inits
    # 
    # If you are in BREAK, then it's either a TOO, an SCS-107-only, or a Full Stop. Default to TOO
    # Unless the user indicates this is an SCS-107 the type will default to TOO
    $load_type = "TOO";

    # Initialize these user inputs to a meaningless number
    # User inpute are either 1 (NO) or 2 (YES)
    $ans107 = 0;
    $approved_once_answer = 0;
    $interrupt_same_answer = 0;
    $interrupt_time = "---";       # Default to no interrupt time string

    # If an "A" load, copy history file from interrupted load to current dir
    if (${load_version} eq "a" )
      {
       `cp $hist ACIS-History_edit.txt`;
       $edit_hist = <$localdir/ACIS-History_edit.txt>;
       chomp ($edit_hist);
      }

    elsif (${load_version} ne "a")
      {
        # Otherwise, use the already hand-edited history file
        # (except if replan and approved load are same)
        print "\nWas this load already approved once, and the replan has the same name?\n\t (1=no, 2=yes)\n\tex: NOV1102 was already approved last week, but the replan is also\n\t called NOV1102.\n";
        $approved_once_answer = <STDIN>;
        chomp($approved_once_answer);

        # print the response to the question out for the log file
        print "\nResponse: $approved_once_answer\n";

    #  ANSWER = NO - Check for same interrupt time
    if($approved_once_answer == 1)
      {
	print "\n If not the A load, is the interrupt time the same as the A load?\n\t(1=no, 2=yes)\n";
	$interrupt_same_answer = <STDIN>;
	chomp($interrupt_same_answer);

        # print the response to the question: is interrupt time the same?
        print "\nResponse: $interrupt_same_answer\n";

       }# END IF ($approved_once_answer == 1)

    # If the load isn't the same name as an already approved load AND
    #    It has the SAMe interrupt time as the A load
    if ($approved_once_answer eq 1 && $interrupt_same_answer eq 2)
       {
	$q="1";
       }
    else
       # Else either it WAS approved or INTERRUPT TIME DIFFERENT
       {
	$q="2";
       }

    if ($q eq "1")
      {
        # Copy the A load ACIS-History_edit.txt to the present dir
	`cp ${cur_load_dir}/oflsa/ACIS-History_edit.txt $localdir/.`;
        # Change the protections on the ACIS-History file
	$edit_hist = <$localdir/ACIS-History_edit.txt>;    
	`chmod g+w $edit_hist`;
        # Copy over the perigee file from the A load
	`cp ${cur_load_dir}/oflsa/ACIS-Perigee_edit.txt $localdir/.`;
        # .....and change the protections on that file.
	$edit_perigee = <$localdir/ACIS-Perigee_edit.txt>;    
	`chmod g+w $edit_perigee`;
      }
    elsif ($q eq "2")
      {
	`cp $hist ACIS-History_edit.txt`;
	$edit_hist = <$localdir/ACIS-History_edit.txt>;
	chomp ($edit_hist);
	`chmod g+w $edit_hist`;
      }
   else 
      {die "please enter only 1 or 2\n";}

    } #end else if not A version  elsif (${load_version} ne "a") 

# Only display history editing instructions for "A" version of load 
# (or if replan has same name as approved load)
# If this is the A load, OR
#    either it's not the same name as an approved load or the iterrupt time is different
if (${load_version} eq "a" || $q eq "2")
  {
    $display_flag = 1;
    print "\nIMPORTANT!Please answer these questions:\n";
    $ans107=0;
    print "\tHas an SCS-107 been run (autonomously or via command) putting HRC-S in the focal plane?\n\t(1=no 2=yes)\n";
    $ans107=<STDIN>;
    chop($ans107);

    # Print the response to the question:  Has an SCS-107 been run putting
    # HRC-S in the focal plane?
    print "\nResponse: $ans107\n";

     
    # If an SCS-107 was run, find out it it's a SCS-107 only or part of a Full Stop
    #    $ans107 == 2 means YES a 107 was run
    if ($ans107 eq 2)
      {
        print "\n\tWas this a FULL STOP (both science and vehicle loads stopped)?\n\t(1=no 2=yes)\n";
        $ansFS=<STDIN>;
        chop($ansFS);

        # Print the response to the question:  Was this a FULL STOP 
        print "\nResponse: $ansFS\n";

        # Set the load type to either SCS-107 or STOP
        if ($ansFS eq 1)
          {$load_type = "SCS-107";}
        else
          {$load_type = "STOP";}
      } # ENDIF ($ans107 eq 2)
    else # Otherwise it was a TOO load
         # This variable set may not be strictly necessary since load_type is initialized at the
         # top of the subroutine. But I hate fall through default results like that
      {$load_type = "TOO";}
        
     # Inform the user what type of load was determined from this subroutine.
     print "\n\nI have determined that the Review Load is of type: $load_type\n\n";

    # Capture the interrupt time
    print "\tPlease enter the interrupt time in format YYYY:DOY:HH:MM:SS.SS\n";
    $interrupt_time = <STDIN>;
    chop($interrupt_time);

    # Print the interrupt time in format YYYY:DOY:HH:MM:SS.SS
    print "\nResponse: $interrupt_time\n";
    # With an extra carriage return at the end of the prints
    # to make them stand out
    print "\n";

    unless($ans107 eq "2")
      {
        # Pass the interrupt time to edit_history.pl so that it's incorporated
        # into the history file
	$edit_call="$script_store_dir/edit_history.pl ${ofls_dir} ${prev_load_dir} $interrupt_time";
      }
    else
      {
        $edit_call="$script_store_dir/edit_history.pl ${ofls_dir} ${prev_load_dir} $interrupt_time -h ";
      } 
    
    # Execute the History File edit
    print STDERR "$edit_call\n";  # Debug
    system($edit_call);
    `chmod g+w $edit_hist`;

  } # END IF if (${load_version} eq "a" || $q eq "2" || $test_dir)

elsif (${load_version} ne "a" && $q eq "1")
  {
    print "\n\tThe edited history file and the edited perigee file were copied from the oflsa\n\tdirectory for this load to the current directory.\n\n";
  }

  # Under all circumstances, we need to extract the
  # Interrupt time from the Edited history file
  # Open the file
  open(HIST_EDIT_FILE, "ACIS-History_edit.txt");
  # Read the line
  $line1 = <HIST_EDIT_FILE>;
  # Extract the interrupt time; it is delimited by a space
  $where=index($line1,' ');

print "\nFirst line is: $line1 \n";

  $interrupt_time = substr($line1, 0, $where);

print "\nThe extracted time stamp is: *$interrupt_time*\n";
  # Done with the file. Close it.
  close(HIST_EDIT_FILE);


# Return the load type and the interrupt time
return($load_type, $interrupt_time);

} # END SUB LR_BREAK

sub logprint {
    my ($a_string) = @_;
    print $a_string;
    open(LRLOG, ">>lr_log:") | die "Couldn't open lr_log for appending.\n";
    print LRLOG a_string;
    close LRLOG;
}

sub logdie {
    my ($a_string) = @_;
    logprint ($a_string);
    die a_string;
}

sub logsystem {
    my ($a_string) = @_;
    system($a_string + " 2>&1 | tee  >> lr_log");
}
